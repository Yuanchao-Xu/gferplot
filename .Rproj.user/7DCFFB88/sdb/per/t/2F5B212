{
    "collab_server" : "",
    "contents" : "\n\n# this is for setting plot radius\ngetRadius <- function(y, small = 1.5, medium = 3, large = 5) {\n  r <- sapply(y, function(x) {\n    if (x <= 40000 & x >= 15000) {\n      x <- medium\n    } else if (x < 15000) {\n      x <- small\n    } else {\n      x <- large\n    }\n  })\n  return (r)\n}\n\n\n#' plotScatterPie\n#'\n#' plot scatter pie chart for multidimension analysis, such as waternomics. This plot can\n#' provide information about water use/wastewater of each provinces and GDP mix of each provinces,\n#' see examples.\n#' @param data a dataframe with information like x, y, r, etc. Refer to \\code{GDPmix}\n#' @param labelLine how far is label to pie chart, can be left with default value.\n#' @param xmeanLine if plot x mean line\n#' @param ymeanLine if plot y mean line\n#' @importFrom graphics plot abline text\n#' @importFrom ggrepel geom_text_repel\n#' @import ggplot2\n#'\n\nplotScatterPie <- function(data, xmeanLine = TRUE, ymeanLine = TRUE, labelLine = NULL) {\n\n  with (data, {\n    layer_basic <- ggplot()\n    #  layer_points <- geom_point(data = data, aes(x, y, size = radius))\n\n    data$radius <- getRadius(data$GDP)\n\n    col <- c(rgb(107/255, 128/255, 51/255), rgb(2/255, 3/255, 3/255), rgb(13/255, 119/255, 185/255))\n    layer_pie <- geom_scatterpie_withcolor(data = data, aes(x, y, r = radius),\n                                 cols = colnames(data)[3:5], color = NA)\n\n    if (is.null(labelLine)) labelLine <- max(data$radius)/3\n\n    layer_label <- geom_text_repel(data = data, aes(x, y, label = Province),\n                                   point.padding = unit(labelLine, \"lines\"))\n    #layer_legend <- geom_scatterpie_legend(data$radius, x= 0, y=0)\n\n    layer_plot <- layer_basic + layer_pie + layer_label + coord_equal()\n\n    if (xmeanLine == TRUE) layer_plot <- layer_plot + geom_vline(xintercept = mean(data$x), color = 'red', size = 1.5, linetype = 2)\n    if (ymeanLine == TRUE) layer_plot <- layer_plot + geom_hline(yintercept = mean(data$y), color = 'red', size = 1.5, linetype = 2)\n\n\n\n    style <- ggstyle()\n\n    print(layer_plot + style)\n\n  })\n}\n\n\n#' @import ggplot2\nggstyle <- function() {\n  # a <- theme_classic() +\n  #   theme(axis.line = element_line(size = 1, colour = \"black\"))\n             #panel.background = element_rect(fill = \"white\"),\n             #panel.grid.major = element_line(colour = \"grey50\"))\n}\n\n\n\n\n##' scatter pie plot\n##'\n##'\n##' @title geom_scatterpie\n##' @param mapping aes mapping\n##' @param data data\n##' @param cols cols the pie data\n##' @param ... additional parameters\n##' @importFrom ggforce geom_arc_bar\n##' @importFrom utils modifyList\n##' @importFrom tidyr gather_\n##' @importFrom ggplot2 aes_\n##' @export\n##' @return layer\n##' @examples\n##' library(ggplot2)\n##' d <- data.frame(x=rnorm(5), y=rnorm(5))\n##' d$A <- abs(rnorm(5, sd=1))\n##' d$B <- abs(rnorm(5, sd=2))\n##' d$C <- abs(rnorm(5, sd=3))\n##' ggplot() + geom_scatterpie(aes(x=x, y=y), data=d, cols=c(\"A\", \"B\", \"C\")) + coord_fixed()\n##' @author guangchuang yu\ngeom_scatterpie_withcolor <- function(mapping=NULL, data, cols, ...) {\n  if (is.null(mapping))\n    mapping <- aes_(x=~x, y=~y)\n  mapping <- modifyList(mapping, aes_(r0=0, fill=~type,\n                                      amount=~value))\n\n  if (!'r' %in% names(mapping)) {\n    xvar <- as.character(mapping)[\"x\"]\n    size <- diff(range(data[, xvar]))/50\n    mapping <- modifyList(mapping, aes_(r=size))\n  }\n\n  names(mapping)[match(c(\"x\", \"y\"), names(mapping))] <- c(\"x0\", \"y0\")\n\n  df <- gather_(data, \"type\", \"value\", cols)\n  ## df$type <- factor(df$type, levels=cols)\n  geom_arc_bar(mapping, data=df, stat='pie', inherit.aes=FALSE, ...)\n}\n\n\n#' pivot\n#'\n#' Transfer 2D table to readable table for tableau\n#'\n#'\n#' @param data a dataframe like \\code{GDPmix}\n#' @param reserve choose which column to reserve\n#' @param newColName name for new column, apart from the reserved columns, all the other will be re-organised into a new column\n\n\npivot <- function(data, reserve, newColName) {\n  data1 <- data[, reserve]\n  data2 <- do.call('rbind', rep(list(data1), ncol(data) - length(reserve)))\n  data3 <- data[, !(colnames(data) %in% reserve)]\n  data4 <- lapply(1:length(data3), function(x) {\n    name <- names(data3)[x]\n    x1 <- data3[, x]\n    y <- data.frame(rep(name, length(x1)), x1)\n    names(y) <- c(newColName, 'Value')\n    return (y)\n  })\n  data5 <- do.call('rbind', data4)\n\n  data6 <- cbind(data2, data5)\n  return(data6)\n}\n########################################################################################\n#######################################################################################\n#'\n#'\n#'\n#' #' plotWaternomics\n#' #'\n#' #' plot special waternomics chart for CWR\n#' #'\n#' #'\n#' #' @param data a dataframe containing columns of GDP, Value-added of fisrt/second/third industry, x and y\n#' #' x and y are the coordinates of the plot, and it varies depending on needs, can be per capita\n#' #' water use vs. per capita wastewater, etc. See example of year 2015 by \\code{GDPmix}\n#' #'\n#' #' Columns should be exactly the same as GDPmix, which means, first column is province, seconnd is x,\n#' #' third is y, fourth is Frist, etc. Load GDPmix to have a look at the columns.\n#' #' @param title chart title\n#' #' @param xname x axis name\n#' #' @param yname y axis name\n#' #' @param small radius of small circle, default is 1.5\n#' #' @param medium radius of medium circle, default is 3\n#' #' @param large radius of large circle, default is 5\n#' #' @param legend whether to show legend, default is TRUE\n#' #' @param label whether to show label, default is TRUE\n#' #' @param xmean a line showing mean value of x\n#' #' @param ymean a line showing mean value of y\n#' #' @param line whether to show ablines, default is TRUE\n#' #' @importFrom mapplots add.pie\n#' #' @importFrom graphics plot plot.new\n#' #' @importFrom grDevices rgb\n#' #' @importFrom plotrix thigmophobe.labels\n#' #' @export\n#' #' @examples\n#' #' \\dontrun{\n#' #' data(GDPmix)\n#' #' plotwaternomics(GDPmix)\n#' #' }\n#'\n#'\n#'\n#' plotWaternomics <- function(data, title = '', xname = '', yname = '', small = 1.5, medium = 3, large = 5,\n#'                             legend = TRUE, label = TRUE, xmean = NULL, ymean = NULL, line = TRUE) {\n#'   # plot basic plot based on x and y\n#'   #plot.new()\n#'\n#'   # for some buffer space, extend the x and y axis, redefine them first\n#'   xlim <- getLim(data$x)\n#'\n#'   ylim <- getLim(data$y)\n#'\n#'\n#'   plot(data$x, data$y, main = title, xlab = xname, ylab = yname,\n#'        xlim = xlim, ylim = ylim,\n#'        bty = 'n')\n#'\n#'\n#'\n#'   provinceNum <- nrow(data)\n#'\n#'   # decide radius of the pie charts\n#'   r <- getRadius(data$GDP, small, medium, large)\n#'\n#'   # define CWR color\n#'   col <- c(rgb(107/255, 128/255, 51/255), rgb(2/255, 3/255, 3/255), rgb(13/255, 119/255, 185/255))\n#'\n#'\n#'\n#'\n#'   # add pie charts\n#'   for (i in 1:provinceNum) {\n#'\n#'     add.pie(x = data$x[i], y = data$y[i], z = c(data$First[i], data$Second[i], data$Third[i]),\n#'             labels = '', radius = r[i], col = col, border = \"white\")\n#'     #thigmophobe.labels(data$x[i], data$y[i], data$Province[i], offset = r[i]/3)\n#'\n#'   }\n#'   if (legend == TRUE) {\n#'     legend('topright', c(\"Agriculture\",\"Industry\",\"Services\"), cex = 0.8,\n#'            fill = col)\n#'   }\n#'   if (label == TRUE) {\n#'     thigmophobe.labels(data$x, data$y, data$Province, offset = 1)\n#'   }\n#'\n#'\n#'   if (line == TRUE) {\n#'     # add ablines of national mean or mean\n#'     if (is.null(xmean)) xmean <- round(mean(data$x), 2)\n#'     if (is.null(ymean)) ymean <- round(mean(data$y), 2)\n#'     abline(h = ymean, v = xmean, col = '#c00000', lwd = 3, lty = 2)\n#'   }\n#'\n#'   #spread.labels(data$x, data$y, data$Province, offsets = 0.01)\n#'\n#' }\n#'\n#'\n#'\n#' #' plotWaternomics_legend\n#' #'\n#' #' legend for plot special waternomics chart for CWR\n#' #'\n#' #' @param label whether to show label, default is TRUE\n#' #' @importFrom mapplots add.pie\n#' #' @importFrom graphics plot abline text\n#' #' @importFrom grDevices rgb\n#' #' @export\n#' #' @examples\n#' #' \\dontrun{\n#' #' plotwaternomics_legend()\n#' #' }\n#' plotWaternomics_legend <- function(label = TRUE) {\n#'   r <- c(5, 3, 1.5)\n#'   x <- c(0, 0, 0)\n#'   y <- c(7, 16, 21)\n#'   plot (x, y, xlim = c(-3, 3), ylim = c(0, 23), xaxt = 'n', yaxt = 'n', bty = 'n')\n#'\n#'   col <- c(rgb(107/255, 128/255, 51/255), rgb(2/255, 3/255, 3/255), rgb(13/255, 119/255, 185/255))\n#'\n#'   for (i in 1:3) {\n#'     add.pie(x = x[i], y = y[i], z = c(1, 1, 1), radius = r[i], labels = '', col = col, border = 'white')\n#'   }\n#'   if (label == TRUE) {\n#'     size <- 1.2\n#'     text(-0.7, 8.5, \"Service\", col = 'white', cex = size)\n#'     text(0.7, 8.5, \"Agriculture\", col = 'white', cex = size)\n#'     text(0, 4, \"Industry\", col = 'white', cex = size)\n#'   }\n#' }\n#'\n#'\n#'\n#'\n#'\n#' getLim <- function(x) {\n#'   # decide axis interval\n#'   dig <- nchar(min(round(x)))\n#'\n#'   x1 <- round(min(x) - (max(x) - min(x))/length(x), -(dig - 1))\n#'   x2 <- round(max(x) + (max(x) - min(x))/length(x), -(dig - 1))\n#'\n#'   return(c(x1, x2))\n#' }\n#'\n#'\n#'\n\n",
    "created" : 1501730995731.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1491838975",
    "id" : "2F5B212",
    "lastKnownWriteTime" : 1501752427,
    "last_content_update" : 1501752427880,
    "path" : "~/GitHub/gferplot/R/plotScatterPie.R",
    "project_path" : "R/plotScatterPie.R",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}